shared integer result;

integer mypid = spid;
shared boolean[] flag = {false, false};
shared boolean[] busy = {true, true};
shared integer turn;
integer i;

while(i < 20){
    synchronized{
        flag[mypid] = true;
        turn = 1-mypid;
    }
    while (flag[1-mypid] && turn == 1 - mypid){}

    result = result + 1;

    synchronized{
        flag[mypid] = false;
    }

	i = i + 1;
}

busy[mypid] = false;

if(mypid == 0){
    while(busy[0] || busy[1]){
    }
    out(result);
}